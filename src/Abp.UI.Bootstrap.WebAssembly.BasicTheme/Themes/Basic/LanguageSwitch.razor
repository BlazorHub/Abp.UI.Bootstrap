@using Volo.Abp.Localization
@using System.Globalization
@using System.Collections.Immutable
@inject ILanguageProvider LanguageProvider
@inject IJSRuntime JsRuntime
@if (_otherLanguages != null && _otherLanguages.Any())
{
<li class="nav-item dropdown menu">
    <a class="nav-link dropdown-toggle" data-toggle="dropdown" role="button" href="#">@_currentLanguage.DisplayName</a>
    <div class="dropdown-menu">
        @foreach (LanguageInfo language in this._otherLanguages)
        {
<a @onclick="()=>ChangeLanguageAsync(language)" class="dropdown-item" id="@language.UiCultureName"><i class="fa"></i><span class="nav-link-text">@language.DisplayName</span></a>}
    </div>
</li>}
@code { private IReadOnlyList<LanguageInfo> _otherLanguages;
            private LanguageInfo _currentLanguage;

            protected override async Task OnInitializedAsync()
            {
                var selectedLanguageName = await JsRuntime.InvokeAsync<string>(
                    "localStorage.getItem",
                    "Abp.SelectedLanguage"
                    );

                _otherLanguages = await LanguageProvider.GetLanguagesAsync();

                if (!_otherLanguages.Any())
                {
                    return;
                }

                if (!selectedLanguageName.IsNullOrWhiteSpace())
                {
                    _currentLanguage = _otherLanguages.FirstOrDefault(l => l.UiCultureName == selectedLanguageName);
                }

                if (_currentLanguage == null)
                {
                    _currentLanguage = _otherLanguages.FirstOrDefault(l => l.UiCultureName == CultureInfo.CurrentUICulture.Name);
                }

                if (_currentLanguage == null)
                {
                    _currentLanguage = _otherLanguages.FirstOrDefault();
                }

                _otherLanguages = _otherLanguages.Where(l => l != _currentLanguage).ToImmutableList();
            }

            private async Task ChangeLanguageAsync(LanguageInfo language)
            {
                await JsRuntime.InvokeVoidAsync(
                    "localStorage.setItem",
                    "Abp.SelectedLanguage", language.UiCultureName
                    );

                await JsRuntime.InvokeVoidAsync("location.reload");
            } }
